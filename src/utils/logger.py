# ========================================================================================
# File: logger.py
# Project: CloeliaAI_AgentSystem
# Author: Khaylub Thompson-Calvin
# Date: 2025-05-08
#
# Description:
# This module provides logging functionality for symbolic triggers generated by the
# Cloelia AI Agent. When a symbolic insight is detected (e.g., anger â†’ patience),
# this logger saves the full event (emotion, virtue, action, and trigger ID)
# to a persistent JSON file under `src/logs/symbolic_log.json`.
#
# Features:
# - Automatically creates the logs directory if missing
# - Appends new trigger memory with UTC timestamp
# - Maintains a clean, append-only symbolic memory log
#
# Usage:
#   from utils.logger import log_symbolic_trigger
#   log_symbolic_trigger({
#       "user_id": 2,
#       "emotion": "anger",
#       "virtue": "patience",
#       "action": "reflection_prompt",
#       "trigger_id": 7
#   })
# ========================================================================================

import os
import json
from datetime import datetime

# Dynamically resolve the full path to symbolic_log.json within src/logs/
LOG_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "logs", "symbolic_log.json"))

def log_symbolic_trigger(data: dict):
    """
    Appends a symbolic trigger event to the symbolic_log.json file.

    Parameters:
    - data (dict): A dictionary containing symbolic trigger details:
        - user_id (int)
        - emotion (str)
        - virtue (str)
        - action (str)
        - trigger_id (int)

    Behavior:
    - Ensures the log directory exists
    - Appends new symbolic insight as a JSON object with UTC timestamp
    - Creates the log file if it does not exist
    """

    # Ensure the logs directory exists
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

    # Construct log entry with UTC timestamp
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        **data
    }

    # Load existing log entries or initialize a new list
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            log_data = json.load(f)
    else:
        log_data = []

    # Append the new memory and write back to the file
    log_data.append(log_entry)

    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(log_data, f, indent=4)
